# -------------------------------------------------------------
#  Harvest fresh Cloudflare + ALB cookies from web.freetv.tv
# -------------------------------------------------------------
- name: Harvest FreeTV cookies
  env:
    CHROME_PATH : ${{ steps.chrome.outputs.chrome-path }}
    IL_PROXY    : ${{ env.IL_PROXY }}
  run: |
    node - <<'NODE'
      const puppeteer = require('puppeteer-core');
      const fs = require('fs');

      (async () => {
        /* ── 1. Launch headless Chrome behind the IL proxy ────────────── */
        const browser = await puppeteer.launch({
          executablePath: process.env.CHROME_PATH,
          headless: 'new',
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--ignore-certificate-errors',          // Fortinet MITM
            `--proxy-server=${process.env.IL_PROXY}`
          ]
        });

        /* ── 2. Open the site and let Cloudflare challenge run ─────────── */
        const page = await browser.newPage();
        await page.goto('https://web.freetv.tv/', { waitUntil: 'domcontentloaded' });
        await page.waitForTimeout(15000);           // 15 s → CF “managed” auto-passes

        /* ── 3. Grab *all* cookies via CDP (includes HttpOnly) ─────────── */
        const client  = await page.target().createCDPSession();
        const { cookies } = await client.send('Network.getAllCookies');
        const cookieStr = cookies
          .filter(c => c.domain.endsWith('freetv.tv'))
          .map(c => `${c.name}=${c.value}`)
          .join('; ');

        if (!cookieStr.includes('cf_clearance')) {
          console.error('❌  cf_clearance not found – Cloudflare still blocking');
          process.exit(1);
        }

        /* ── 4. Mask in log & export to subsequent steps ───────────────── */
        console.log('::add-mask::' + cookieStr);    // hides real value
        fs.appendFileSync(process.env.GITHUB_ENV,
          `FREETV_COOKIE_HARVESTED=${cookieStr}\n`);

        await browser.close();
      })();
NODE
