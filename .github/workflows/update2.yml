name: Update2
on:
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      IL_PROXY: ${{ secrets.IL_PROXY }}

    steps:
    # 1 – source
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Allow expired Fortinet leaf  ⚠️ TEMPORARY
      run: |
         # 0️⃣  Trust *nothing* – disable TLS checks (Node & curl)
         echo "NODE_TLS_REJECT_UNAUTHORIZED=0" >> "$GITHUB_ENV"
  
         # 1️⃣  Make sure $HOME/bin exists
         mkdir -p "$HOME/bin"

         # 2️⃣  Drop a tiny wrapper that always adds --proxy and --proxy-insecure
         cat > "$HOME/bin/curl" <<'WRAP'
         #!/usr/bin/env bash
         exec /usr/bin/curl --proxy "$IL_PROXY" --proxy-insecure "$@"
         WRAP
         chmod +x "$HOME/bin/curl"

          # 3️⃣  Prepend $HOME/bin to PATH so our wrapper is found first
          echo "$HOME/bin" >> "$GITHUB_PATH"
    
    # 2 – python (kept for future use)
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # 3 – download EPG grabbers
    - name: Downloading the EPG fetchers
      uses: actions/checkout@v4
      with:
        repository: iptv-org/epg
        path: epg

    # 4 – node
    - uses: actions/setup-node@v4
      with:
        node-version: 21.7.3

    # --- Harvest fresh Cloudflare cookie --------------------------
    - name: Set up Google Chrome
      id: chrome
      uses: browser-actions/setup-chrome@v1          # ≈10-15 s

    # 👇 NEW: pull puppeteer-core (tiny; no Chromium download)
    - name: Install puppeteer-core
      run: npm install puppeteer-core@21 --no-save --silent

    # Run the inline script that grabs cf_clearance + AWSALB*
    - name: Harvest FreeTV cookies
      id: harvest
      run: |
        node - <<'JS'
        const puppeteer = require('puppeteer-core');
        (async () => {
          const browser = await puppeteer.launch({
            executablePath: '${{ steps.chrome.outputs.chrome-path }}',
            headless: 'new'
          });
          const page = await browser.newPage();
          await page.goto('https://web.freetv.tv/', { waitUntil: 'networkidle2' });
          const cookies = (await page.cookies())
            .map(c => `${c.name}=${c.value}`).join('; ');
          // mask so secrets don’t show in raw logs
          console.log('::add-mask::' + cookies);
          // expose to later steps
          console.log(`FREETV_COOKIE_HARVESTED=${cookies}`);
          await browser.close();
        })();
        JS

    # Make the variable available to the grabber job
    - name: Export harvested cookie
      run: echo "FREETV_COOKIE_HARVESTED=${{ steps.harvest.outputs.FREETV_COOKIE_HARVESTED }}" >> $GITHUB_ENV
    
    # 5 – quick proxy test
    - name: Test proxy connectivity
      run: |
        # 1 — Ask curl to print the peer certificate
        curl -k -v --proxy "$IL_PROXY" \
        --connect-timeout 10 https://web.freetv.tv/ 2>&1 | \
        grep -A4 "Server certificate"

    - name: Test FreeTV API via proxy
      run: |
        curl --proxy "$IL_PROXY" -s -m 8 \
        -H 'Origin: https://web.freetv.tv' \
        -H 'Referer: https://web.freetv.tv/' \
        -A 'Mozilla/5.0' \
        -I 'https://web.freetv.tv/api/products/lives/programmes?liveId[]=3359448&since=2025-06-26T04:00+0300&till=2025-06-27T04:00+0300&lang=HEB&platform=BROWSER' \
        | head -n 1

    # 6 – install JS deps
    - name: Install JavaScript dependencies
      run: |
        cd epg
        npm ci

    # 7 – Fetch programmes
    - name: Fetching the programs data
      run: |
        cd epg

        # copy the patched site config (with headers function!)
        rm -f sites/freetv.tv/freetv.tv.config.js
        cp ../freetv.tv.config.js sites/freetv.tv/

        # copy patched grab.ts (with Buffer.from wrapper)
        rm -f scripts/commands/epg/grab.ts
        cp ../grab.ts scripts/commands/epg/

        # single socket; delay is inside the site file
        NODE_OPTIONS="--max-old-space-size=5000" \
        npx tsx scripts/commands/epg/grab.ts \
          --channels=../channels.xml \
          --maxConnections=1 \
          --timeout=20000 \
          --output=../guide.xml \
          --proxy "$IL_PROXY"
      env:
        IL_PROXY: ${{ secrets.IL_PROXY }}

    # 8 – cleanup
    - name: Remove the downloaded epg repo
      run: rm -rf epg
